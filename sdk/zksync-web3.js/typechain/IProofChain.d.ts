/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IProofChainInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "commitBlocks(tuple,tuple[])": FunctionFragment;
    "executeBlocks(tuple[])": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "getAllowList()": FunctionFragment;
    "getBridgehead()": FunctionFragment;
    "getCurrentProposalId()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getL2BootloaderBytecodeHash()": FunctionFragment;
    "getL2DefaultAccountBytecodeHash()": FunctionFragment;
    "getL2SystemContractsUpgradeBlockNumber()": FunctionFragment;
    "getL2SystemContractsUpgradeTxHash()": FunctionFragment;
    "getPendingGovernor()": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getProposedUpgradeHash()": FunctionFragment;
    "getProposedUpgradeTimestamp()": FunctionFragment;
    "getProtocolVersion()": FunctionFragment;
    "getSecurityCouncil()": FunctionFragment;
    "getTotalBlocksCommitted()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalBlocksVerified()": FunctionFragment;
    "getUpgradeProposalState()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "getVerifierParams()": FunctionFragment;
    "initialize(uint256,address,address,address,address,tuple,bytes32,bytes32,bytes32,uint256)": FunctionFragment;
    "isApprovedBySecurityCouncil()": FunctionFragment;
    "isDiamondStorageFrozen()": FunctionFragment;
    "isFacetFreezable(address)": FunctionFragment;
    "isFunctionFreezable(bytes4)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "proveBlocks(tuple,tuple[],tuple)": FunctionFragment;
    "revertBlocks(uint256)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPorterAvailability(bool)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "storedBlockHash(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllowList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgehead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BootloaderBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUpgradeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUpgradeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradeProposalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifierParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedBySecurityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPorterAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgehead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2SystemContractsUpgradeTxHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUpgradeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUpgradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradeProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedBySecurityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPorterAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint256,bytes32,bytes32)": EventFragment;
    "BlockExecution(uint256,bytes32,bytes32)": EventFragment;
    "BlocksRevert(uint256,uint256,uint256)": EventFragment;
    "BlocksVerification(uint256,uint256)": EventFragment;
    "IsPorterAvailableStatusUpdate(bool)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "NewPriorityTxMaxGasLimit(uint256,uint256)": EventFragment;
    "ProposeTransparentUpgrade(tuple,uint256,bytes32)": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksVerification"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IsPorterAvailableStatusUpdate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityTxMaxGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeTransparentUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
}

export class IProofChain extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IProofChainInterface;

  functions: {
    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      facet: string;
      0: string;
    }>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      facet: string;
      0: string;
    }>;

    facetAddresses(overrides?: CallOverrides): Promise<{
      facets: string[];
      0: string[];
    }>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<{
      facets: string[];
      0: string[];
    }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    facets(overrides?: CallOverrides): Promise<{
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    "facets()"(overrides?: CallOverrides): Promise<{
      0: { addr: string; selectors: string[]; 0: string; 1: string[] }[];
    }>;

    getAllowList(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAllowList()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getBridgehead(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getBridgehead()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getL2BootloaderBytecodeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getL2DefaultAccountBytecodeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getL2SystemContractsUpgradeBlockNumber(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getL2SystemContractsUpgradeBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getL2SystemContractsUpgradeTxHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPendingGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getProposedUpgradeHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProposedUpgradeTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getProtocolVersion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getProtocolVersion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getSecurityCouncil()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "getUpgradeProposalState()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    getVerifier(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getVerifier()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getVerifierParams(overrides?: CallOverrides): Promise<{
      0: {
        recursionNodeLevelVkHash: string;
        recursionLeafLevelVkHash: string;
        recursionCircuitsSetVksHash: string;
        0: string;
        1: string;
        2: string;
      };
    }>;

    "getVerifierParams()"(overrides?: CallOverrides): Promise<{
      0: {
        recursionNodeLevelVkHash: string;
        recursionLeafLevelVkHash: string;
        recursionCircuitsSetVksHash: string;
        0: string;
        1: string;
        2: string;
      };
    }>;

    initialize(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,address,address,address,address,(bytes32,bytes32,bytes32),bytes32,bytes32,bytes32,uint256)"(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isApprovedBySecurityCouncil()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      isFreezable: boolean;
      0: boolean;
    }>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<{
      isFreezable: boolean;
      0: boolean;
    }>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  commitBlocks(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _newBlocksData: {
      blockNumber: BigNumberish;
      timestamp: BigNumberish;
      indexRepeatedStorageChanges: BigNumberish;
      newStateRoot: BytesLike;
      numberOfLayer1Txs: BigNumberish;
      l2LogsTreeRoot: BytesLike;
      priorityOperationsHash: BytesLike;
      initialStorageChanges: BytesLike;
      repeatedStorageChanges: BytesLike;
      l2Logs: BytesLike;
      l2ArbitraryLengthMessages: BytesLike[];
      factoryDeps: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _newBlocksData: {
      blockNumber: BigNumberish;
      timestamp: BigNumberish;
      indexRepeatedStorageChanges: BigNumberish;
      newStateRoot: BytesLike;
      numberOfLayer1Txs: BigNumberish;
      l2LogsTreeRoot: BytesLike;
      priorityOperationsHash: BytesLike;
      initialStorageChanges: BytesLike;
      repeatedStorageChanges: BytesLike;
      l2Logs: BytesLike;
      l2ArbitraryLengthMessages: BytesLike[];
      factoryDeps: BytesLike[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeBlocks(
    _blocksData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeBlocks(tuple[])"(
    _blocksData: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  facetAddress(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddress(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

  getAllowList(overrides?: CallOverrides): Promise<string>;

  "getAllowList()"(overrides?: CallOverrides): Promise<string>;

  getBridgehead(overrides?: CallOverrides): Promise<string>;

  "getBridgehead()"(overrides?: CallOverrides): Promise<string>;

  getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  "getGovernor()"(overrides?: CallOverrides): Promise<string>;

  getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

  "getL2BootloaderBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

  getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

  "getL2DefaultAccountBytecodeHash()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getL2SystemContractsUpgradeBlockNumber(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getL2SystemContractsUpgradeBlockNumber()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getL2SystemContractsUpgradeTxHash(overrides?: CallOverrides): Promise<string>;

  "getL2SystemContractsUpgradeTxHash()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getPendingGovernor(overrides?: CallOverrides): Promise<string>;

  "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProposedUpgradeHash(overrides?: CallOverrides): Promise<string>;

  "getProposedUpgradeHash()"(overrides?: CallOverrides): Promise<string>;

  getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposedUpgradeTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "getProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSecurityCouncil(overrides?: CallOverrides): Promise<string>;

  "getSecurityCouncil()"(overrides?: CallOverrides): Promise<string>;

  getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUpgradeProposalState(overrides?: CallOverrides): Promise<number>;

  "getUpgradeProposalState()"(overrides?: CallOverrides): Promise<number>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  "getVerifier()"(overrides?: CallOverrides): Promise<string>;

  getVerifierParams(
    overrides?: CallOverrides
  ): Promise<{
    recursionNodeLevelVkHash: string;
    recursionLeafLevelVkHash: string;
    recursionCircuitsSetVksHash: string;
    0: string;
    1: string;
    2: string;
  }>;

  "getVerifierParams()"(
    overrides?: CallOverrides
  ): Promise<{
    recursionNodeLevelVkHash: string;
    recursionLeafLevelVkHash: string;
    recursionCircuitsSetVksHash: string;
    0: string;
    1: string;
    2: string;
  }>;

  initialize(
    _chainId: BigNumberish,
    _bridgeheadChainContract: string,
    _governor: string,
    _allowList: string,
    _verifier: string,
    _verifierParams: {
      recursionNodeLevelVkHash: BytesLike;
      recursionLeafLevelVkHash: BytesLike;
      recursionCircuitsSetVksHash: BytesLike;
    },
    _l2BootloaderBytecodeHash: BytesLike,
    _l2DefaultAccountBytecodeHash: BytesLike,
    _blockHashZero: BytesLike,
    _priorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,address,address,address,address,(bytes32,bytes32,bytes32),bytes32,bytes32,bytes32,uint256)"(
    _chainId: BigNumberish,
    _bridgeheadChainContract: string,
    _governor: string,
    _allowList: string,
    _verifier: string,
    _verifierParams: {
      recursionNodeLevelVkHash: BytesLike;
      recursionLeafLevelVkHash: BytesLike;
      recursionCircuitsSetVksHash: BytesLike;
    },
    _l2BootloaderBytecodeHash: BytesLike,
    _l2DefaultAccountBytecodeHash: BytesLike,
    _blockHashZero: BytesLike,
    _priorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<boolean>;

  "isApprovedBySecurityCouncil()"(overrides?: CallOverrides): Promise<boolean>;

  isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

  "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

  isFacetFreezable(_facet: string, overrides?: CallOverrides): Promise<boolean>;

  "isFacetFreezable(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFunctionFreezable(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFunctionFreezable(bytes4)"(
    _selector: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidator(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveBlocks(
    _prevBlock: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBlocks: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recursiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
    _prevBlock: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    },
    _committedBlocks: {
      blockNumber: BigNumberish;
      blockHash: BytesLike;
      indexRepeatedStorageChanges: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      priorityOperationsHash: BytesLike;
      l2LogsTreeRoot: BytesLike;
      timestamp: BigNumberish;
      commitment: BytesLike;
    }[],
    _proof: {
      recursiveAggregationInput: BigNumberish[];
      serializedProof: BigNumberish[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revertBlocks(
    _newLastBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revertBlocks(uint256)"(
    _newLastBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPorterAvailability(
    _zkPorterIsAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPorterAvailability(bool)"(
    _zkPorterIsAvailable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValidator(address,bool)"(
    _validator: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  storedBlockHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "storedBlockHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<{ addr: string; selectors: string[]; 0: string; 1: string[] }[]>;

    getAllowList(overrides?: CallOverrides): Promise<string>;

    "getAllowList()"(overrides?: CallOverrides): Promise<string>;

    getBridgehead(overrides?: CallOverrides): Promise<string>;

    "getBridgehead()"(overrides?: CallOverrides): Promise<string>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    "getGovernor()"(overrides?: CallOverrides): Promise<string>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<string>;

    "getL2BootloaderBytecodeHash()"(overrides?: CallOverrides): Promise<string>;

    getL2DefaultAccountBytecodeHash(overrides?: CallOverrides): Promise<string>;

    "getL2DefaultAccountBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2SystemContractsUpgradeBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<string>;

    "getL2SystemContractsUpgradeTxHash()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<string>;

    "getProposedUpgradeHash()"(overrides?: CallOverrides): Promise<string>;

    getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposedUpgradeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<string>;

    "getSecurityCouncil()"(overrides?: CallOverrides): Promise<string>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<number>;

    "getUpgradeProposalState()"(overrides?: CallOverrides): Promise<number>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    "getVerifier()"(overrides?: CallOverrides): Promise<string>;

    getVerifierParams(
      overrides?: CallOverrides
    ): Promise<{
      recursionNodeLevelVkHash: string;
      recursionLeafLevelVkHash: string;
      recursionCircuitsSetVksHash: string;
      0: string;
      1: string;
      2: string;
    }>;

    "getVerifierParams()"(
      overrides?: CallOverrides
    ): Promise<{
      recursionNodeLevelVkHash: string;
      recursionLeafLevelVkHash: string;
      recursionCircuitsSetVksHash: string;
      0: string;
      1: string;
      2: string;
    }>;

    initialize(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,address,address,address,address,(bytes32,bytes32,bytes32),bytes32,bytes32,bytes32,uint256)"(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<boolean>;

    "isApprovedBySecurityCouncil()"(
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<boolean>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<boolean>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    BlockCommit(
      blockNumber: BigNumberish | null,
      blockHash: BytesLike | null,
      commitment: BytesLike | null
    ): EventFilter;

    BlockExecution(
      blockNumber: BigNumberish | null,
      blockHash: BytesLike | null,
      commitment: BytesLike | null
    ): EventFilter;

    BlocksRevert(
      totalBlocksCommitted: null,
      totalBlocksVerified: null,
      totalBlocksExecuted: null
    ): EventFilter;

    BlocksVerification(
      previousLastVerifiedBlock: BigNumberish | null,
      currentLastVerifiedBlock: BigNumberish | null
    ): EventFilter;

    IsPorterAvailableStatusUpdate(isPorterAvailable: null): EventFilter;

    NewGovernor(
      oldGovernor: string | null,
      newGovernor: string | null
    ): EventFilter;

    NewPendingGovernor(
      oldPendingGovernor: string | null,
      newPendingGovernor: string | null
    ): EventFilter;

    NewPriorityTxMaxGasLimit(
      oldPriorityTxMaxGasLimit: null,
      newPriorityTxMaxGasLimit: null
    ): EventFilter;

    ProposeTransparentUpgrade(
      diamondCut: null,
      proposalId: BigNumberish | null,
      proposalSalt: null
    ): EventFilter;

    ValidatorStatusUpdate(
      validatorAddress: string | null,
      isActive: null
    ): EventFilter;
  };

  estimateGas: {
    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllowList(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllowList()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBridgehead(overrides?: CallOverrides): Promise<BigNumber>;

    "getBridgehead()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getL2BootloaderBytecodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getL2BootloaderBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2DefaultAccountBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2SystemContractsUpgradeBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getL2SystemContractsUpgradeTxHash()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposedUpgradeHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedUpgradeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposedUpgradeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSecurityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    "getSecurityCouncil()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeProposalState(overrides?: CallOverrides): Promise<BigNumber>;

    "getUpgradeProposalState()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    "getVerifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifierParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getVerifierParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,address,address,address,address,(bytes32,bytes32,bytes32),bytes32,bytes32,bytes32,uint256)"(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedBySecurityCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    "isApprovedBySecurityCouncil()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDiamondStorageFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    "isDiamondStorageFrozen()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        timestamp: BigNumberish;
        indexRepeatedStorageChanges: BigNumberish;
        newStateRoot: BytesLike;
        numberOfLayer1Txs: BigNumberish;
        l2LogsTreeRoot: BytesLike;
        priorityOperationsHash: BytesLike;
        initialStorageChanges: BytesLike;
        repeatedStorageChanges: BytesLike;
        l2Logs: BytesLike;
        l2ArbitraryLengthMessages: BytesLike[];
        factoryDeps: BytesLike[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeBlocks(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllowList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBridgehead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBridgehead()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentProposalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL2BootloaderBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2BootloaderBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2DefaultAccountBytecodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2DefaultAccountBytecodeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2SystemContractsUpgradeBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2SystemContractsUpgradeTxHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getL2SystemContractsUpgradeTxHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingGovernor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityTxMaxGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedUpgradeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposedUpgradeHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedUpgradeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposedUpgradeTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProtocolVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityCouncil(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSecurityCouncil()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksExecuted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksVerified()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpgradeProposalState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUpgradeProposalState()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVerifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifierParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVerifierParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,address,address,address,(bytes32,bytes32,bytes32),bytes32,bytes32,bytes32,uint256)"(
      _chainId: BigNumberish,
      _bridgeheadChainContract: string,
      _governor: string,
      _allowList: string,
      _verifier: string,
      _verifierParams: {
        recursionNodeLevelVkHash: BytesLike;
        recursionLeafLevelVkHash: BytesLike;
        recursionCircuitsSetVksHash: BytesLike;
      },
      _l2BootloaderBytecodeHash: BytesLike,
      _l2DefaultAccountBytecodeHash: BytesLike,
      _blockHashZero: BytesLike,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedBySecurityCouncil(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedBySecurityCouncil()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDiamondStorageFrozen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDiamondStorageFrozen()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFacetFreezable(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFacetFreezable(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionFreezable(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFunctionFreezable(bytes4)"(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidator(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveBlocks(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proveBlocks((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),tuple[],(uint256[],uint256[]))"(
      _prevBlock: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      },
      _committedBlocks: {
        blockNumber: BigNumberish;
        blockHash: BytesLike;
        indexRepeatedStorageChanges: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        priorityOperationsHash: BytesLike;
        l2LogsTreeRoot: BytesLike;
        timestamp: BigNumberish;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveAggregationInput: BigNumberish[];
        serializedProof: BigNumberish[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revertBlocks(uint256)"(
      _newLastBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPorterAvailability(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPorterAvailability(bool)"(
      _zkPorterIsAvailable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValidator(address,bool)"(
      _validator: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    storedBlockHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "storedBlockHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
