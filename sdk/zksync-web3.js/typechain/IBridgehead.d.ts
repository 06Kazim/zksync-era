/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBridgeheadInterface extends ethers.utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "getChainContract(uint256)": FunctionFragment;
    "getChainImplementation()": FunctionFragment;
    "getChainProofSystem(uint256)": FunctionFragment;
    "getChainProxyAdmin()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getIsProofSystem(address)": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getTotaProofSystems()": FunctionFragment;
    "getTotalChains()": FunctionFragment;
    "isEthWithdrawalFinalized(uint256,uint256,uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)": FunctionFragment;
    "newChain(uint256,address,address,address)": FunctionFragment;
    "newProofSystem(address)": FunctionFragment;
    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)": FunctionFragment;
    "requestL2TransactionProof(uint256,tuple,bytes,bytes[],bool)": FunctionFragment;
    "withdrawFunds(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEthWithdrawal",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainProofSystem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsProofSystem",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotaProofSystems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newChain",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newProofSystem",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { txNumberInBlock: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2TransactionProof",
    values: [
      BigNumberish,
      {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      BytesLike,
      BytesLike[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainProofSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsProofSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotaProofSystems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newProofSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2TransactionProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "EthWithdrawalFinalized(address,uint256)": EventFragment;
    "NewChain(uint16,address,address,address)": EventFragment;
    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthWithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
}

export class IBridgehead extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBridgeheadInterface;

  functions: {
    deposit(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getChainImplementation(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getChainImplementation()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getChainProofSystem(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getChainProofSystem(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getChainProxyAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getIsProofSystem(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getIsProofSystem(address)"(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotaProofSystems(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotaProofSystems()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalChains(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalChains()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    newChain(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newChain(uint256,address,address,address)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newProofSystem(
      _proofSystem: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newProofSystem(address)"(
      _proofSystem: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusion(uint256,uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusion(uint256,uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    requestL2TransactionProof(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestL2TransactionProof(uint256,(address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deposit(
    _chainId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _chainId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  finalizeEthWithdrawal(
    _chainId: BigNumberish,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
    _chainId: BigNumberish,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getChainContract(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChainContract(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainImplementation(overrides?: CallOverrides): Promise<string>;

  "getChainImplementation()"(overrides?: CallOverrides): Promise<string>;

  getChainProofSystem(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChainProofSystem(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainProxyAdmin(overrides?: CallOverrides): Promise<string>;

  "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<string>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  "getGovernor()"(overrides?: CallOverrides): Promise<string>;

  getIsProofSystem(
    _proofSystem: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsProofSystem(address)"(
    _proofSystem: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotaProofSystems(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotaProofSystems()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalChains(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

  isEthWithdrawalFinalized(
    _chainId: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
    _chainId: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2TransactionBaseCost(
    _chainId: BigNumberish,
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
    _chainId: BigNumberish,
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newChain(
    _chainId: BigNumberish,
    _proofSystem: string,
    _chainGovernor: string,
    _allowList: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newChain(uint256,address,address,address)"(
    _chainId: BigNumberish,
    _proofSystem: string,
    _chainGovernor: string,
    _allowList: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newProofSystem(
    _proofSystem: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newProofSystem(address)"(
    _proofSystem: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proveL1ToL2TransactionStatus(
    _chainId: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
    _chainId: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2LogInclusion(
    _chainId: BigNumberish,
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusion(uint256,uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
    _chainId: BigNumberish,
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _chainId: BigNumberish,
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusion(uint256,uint256,uint256,(uint16,address,bytes),bytes32[])"(
    _chainId: BigNumberish,
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestL2Transaction(
    _chainId: BigNumberish,
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
    _chainId: BigNumberish,
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  requestL2TransactionProof(
    _chainId: BigNumberish,
    _params: {
      sender: string;
      txId: BigNumberish;
      l2Value: BigNumberish;
      contractAddressL2: string;
      expirationTimestamp: BigNumberish;
      l2GasLimit: BigNumberish;
      l2GasPrice: BigNumberish;
      l2GasPricePerPubdata: BigNumberish;
      valueToMint: BigNumberish;
      refundRecipient: string;
    },
    _calldata: BytesLike,
    _factoryDeps: BytesLike[],
    _isFree: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestL2TransactionProof(uint256,(address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
    _chainId: BigNumberish,
    _params: {
      sender: string;
      txId: BigNumberish;
      l2Value: BigNumberish;
      contractAddressL2: string;
      expirationTimestamp: BigNumberish;
      l2GasLimit: BigNumberish;
      l2GasPrice: BigNumberish;
      l2GasPricePerPubdata: BigNumberish;
      valueToMint: BigNumberish;
      refundRecipient: string;
    },
    _calldata: BytesLike,
    _factoryDeps: BytesLike[],
    _isFree: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFunds(
    _chainId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFunds(uint256,address,uint256)"(
    _chainId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(_chainId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainImplementation(overrides?: CallOverrides): Promise<string>;

    "getChainImplementation()"(overrides?: CallOverrides): Promise<string>;

    getChainProofSystem(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChainProofSystem(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainProxyAdmin(overrides?: CallOverrides): Promise<string>;

    "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<string>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    "getGovernor()"(overrides?: CallOverrides): Promise<string>;

    getIsProofSystem(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsProofSystem(address)"(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotaProofSystems(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotaProofSystems()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalChains(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newChain(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newChain(uint256,address,address,address)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newProofSystem(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "newProofSystem(address)"(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusion(uint256,uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusion(uint256,uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    requestL2TransactionProof(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2TransactionProof(uint256,(address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EthWithdrawalFinalized(to: string | null, amount: null): EventFilter;

    NewChain(
      chainId: BigNumberish | null,
      chainContract: string | null,
      proofSystem: null,
      chainGovernance: string | null
    ): EventFilter;

    NewPriorityRequest(
      txId: null,
      txHash: null,
      expirationTimestamp: null,
      transaction: null,
      factoryDeps: null
    ): EventFilter;
  };

  estimateGas: {
    deposit(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainProofSystem(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChainProofSystem(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIsProofSystem(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsProofSystem(address)"(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotaProofSystems(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotaProofSystems()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalChains(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newChain(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newChain(uint256,address,address,address)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newProofSystem(
      _proofSystem: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newProofSystem(address)"(
      _proofSystem: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusion(uint256,uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusion(uint256,uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    requestL2TransactionProof(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestL2TransactionProof(uint256,(address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainProofSystem(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainProofSystem(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainProxyAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainProxyAdmin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsProofSystem(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsProofSystem(address)"(
      _proofSystem: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityTxMaxGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotaProofSystems(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotaProofSystems()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalChains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalChains()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newChain(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newChain(uint256,address,address,address)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _chainGovernor: string,
      _allowList: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newProofSystem(
      _proofSystem: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newProofSystem(address)"(
      _proofSystem: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusion(uint256,uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusion(uint256,uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _chainId: BigNumberish,
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    requestL2TransactionProof(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestL2TransactionProof(uint256,(address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _chainId: BigNumberish,
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
