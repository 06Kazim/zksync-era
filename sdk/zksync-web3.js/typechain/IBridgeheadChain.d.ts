/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBridgeheadChainInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "addL2Logs(uint256,bytes32)": FunctionFragment;
    "collectOperationsFromPriorityQueue(uint256)": FunctionFragment;
    "executeBlocks()": FunctionFragment;
    "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "getAllowList()": FunctionFragment;
    "getFirstUnprocessedPriorityTx()": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getPendingGovernor()": FunctionFragment;
    "getPriorityQueueSize()": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalPriorityTxs()": FunctionFragment;
    "initialize(uint256,address,address,address,uint256)": FunctionFragment;
    "isEthWithdrawalFinalized(uint256,uint256)": FunctionFragment;
    "l2LogsRootHash(uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint256)": FunctionFragment;
    "priorityQueueFrontOperation()": FunctionFragment;
    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)": FunctionFragment;
    "requestL2TransactionProof(tuple,bytes,bytes[],bool)": FunctionFragment;
    "setAllowList(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setPriorityTxMaxGasLimit(uint256)": FunctionFragment;
    "setProofChainContract(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addL2Logs",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectOperationsFromPriorityQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEthWithdrawal",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      { txNumberInBlock: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2TransactionProof",
    values: [
      {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      BytesLike,
      BytesLike[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriorityTxMaxGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProofChainContract",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addL2Logs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectOperationsFromPriorityQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2TransactionProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProofChainContract",
    data: BytesLike
  ): Result;

  events: {
    "EthWithdrawalFinalized(address,uint256)": EventFragment;
    "NewAllowList(address,address)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])": EventFragment;
    "NewPriorityTxMaxGasLimit(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthWithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAllowList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityTxMaxGasLimit"): EventFragment;
}

export class IBridgeheadChain extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBridgeheadChainInterface;

  functions: {
    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    addL2Logs(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addL2Logs(uint256,bytes32)"(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectOperationsFromPriorityQueue(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectOperationsFromPriorityQueue(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBlocks(overrides?: Overrides): Promise<ContractTransaction>;

    "executeBlocks()"(overrides?: Overrides): Promise<ContractTransaction>;

    finalizeEthWithdrawal(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllowList(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getAllowList()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getFirstUnprocessedPriorityTx()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPendingGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    initialize(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,address,address,address,uint256)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "l2TransactionBaseCost(uint256,uint256,uint256)"(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationTimestamp: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "priorityQueueFrontOperation()"(overrides?: CallOverrides): Promise<{
      0: {
        canonicalTxHash: string;
        expirationTimestamp: BigNumber;
        layer2Tip: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    requestL2TransactionProof(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestL2TransactionProof((address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAllowList(
      _newAllowList: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowList(address)"(
      _newAllowList: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProofChainContract(
      _proofChainContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProofChainContract(address)"(
      _proofChainContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  addL2Logs(
    _index: BigNumberish,
    _l2LogsRootHashes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addL2Logs(uint256,bytes32)"(
    _index: BigNumberish,
    _l2LogsRootHashes: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectOperationsFromPriorityQueue(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectOperationsFromPriorityQueue(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeBlocks(overrides?: Overrides): Promise<ContractTransaction>;

  "executeBlocks()"(overrides?: Overrides): Promise<ContractTransaction>;

  finalizeEthWithdrawal(
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllowList(overrides?: CallOverrides): Promise<string>;

  "getAllowList()"(overrides?: CallOverrides): Promise<string>;

  getFirstUnprocessedPriorityTx(overrides?: CallOverrides): Promise<BigNumber>;

  "getFirstUnprocessedPriorityTx()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  "getGovernor()"(overrides?: CallOverrides): Promise<string>;

  getPendingGovernor(overrides?: CallOverrides): Promise<string>;

  "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

  getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _chainId: BigNumberish,
    _proofSystem: string,
    _governor: string,
    _allowList: string,
    _priorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,address,address,address,uint256)"(
    _chainId: BigNumberish,
    _proofSystem: string,
    _governor: string,
    _allowList: string,
    _priorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isEthWithdrawalFinalized(
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEthWithdrawalFinalized(uint256,uint256)"(
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2LogsRootHash(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "l2LogsRootHash(uint256)"(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  l2TransactionBaseCost(
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "l2TransactionBaseCost(uint256,uint256,uint256)"(
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priorityQueueFrontOperation(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationTimestamp: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "priorityQueueFrontOperation()"(
    overrides?: CallOverrides
  ): Promise<{
    canonicalTxHash: string;
    expirationTimestamp: BigNumber;
    layer2Tip: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  proveL1ToL2TransactionStatus(
    _l2TxHash: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
    _l2TxHash: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2LogInclusion(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBlock: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
    _blockNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBlock: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestL2Transaction(
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)"(
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  requestL2TransactionProof(
    _params: {
      sender: string;
      txId: BigNumberish;
      l2Value: BigNumberish;
      contractAddressL2: string;
      expirationTimestamp: BigNumberish;
      l2GasLimit: BigNumberish;
      l2GasPrice: BigNumberish;
      l2GasPricePerPubdata: BigNumberish;
      valueToMint: BigNumberish;
      refundRecipient: string;
    },
    _calldata: BytesLike,
    _factoryDeps: BytesLike[],
    _isFree: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestL2TransactionProof((address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
    _params: {
      sender: string;
      txId: BigNumberish;
      l2Value: BigNumberish;
      contractAddressL2: string;
      expirationTimestamp: BigNumberish;
      l2GasLimit: BigNumberish;
      l2GasPrice: BigNumberish;
      l2GasPricePerPubdata: BigNumberish;
      valueToMint: BigNumberish;
      refundRecipient: string;
    },
    _calldata: BytesLike,
    _factoryDeps: BytesLike[],
    _isFree: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAllowList(
    _newAllowList: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowList(address)"(
    _newAllowList: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriorityTxMaxGasLimit(
    _newPriorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriorityTxMaxGasLimit(uint256)"(
    _newPriorityTxMaxGasLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProofChainContract(
    _proofChainContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProofChainContract(address)"(
    _proofChainContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    addL2Logs(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addL2Logs(uint256,bytes32)"(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    collectOperationsFromPriorityQueue(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "collectOperationsFromPriorityQueue(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    executeBlocks(overrides?: CallOverrides): Promise<void>;

    "executeBlocks()"(overrides?: CallOverrides): Promise<void>;

    finalizeEthWithdrawal(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAllowList(overrides?: CallOverrides): Promise<string>;

    "getAllowList()"(overrides?: CallOverrides): Promise<string>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    "getGovernor()"(overrides?: CallOverrides): Promise<string>;

    getPendingGovernor(overrides?: CallOverrides): Promise<string>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<string>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,address,address,address,uint256)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256)"(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationTimestamp: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<{
      canonicalTxHash: string;
      expirationTimestamp: BigNumber;
      layer2Tip: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    requestL2TransactionProof(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2TransactionProof((address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    setAllowList(
      _newAllowList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowList(address)"(
      _newAllowList: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProofChainContract(
      _proofChainContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProofChainContract(address)"(
      _proofChainContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EthWithdrawalFinalized(to: string | null, amount: null): EventFilter;

    NewAllowList(
      oldAllowList: string | null,
      newAllowList: string | null
    ): EventFilter;

    NewGovernor(
      oldGovernor: string | null,
      newGovernor: string | null
    ): EventFilter;

    NewPendingGovernor(
      oldPendingGovernor: string | null,
      newPendingGovernor: string | null
    ): EventFilter;

    NewPriorityRequest(
      txId: null,
      txHash: null,
      expirationTimestamp: null,
      transaction: null,
      factoryDeps: null
    ): EventFilter;

    NewPriorityTxMaxGasLimit(
      oldPriorityTxMaxGasLimit: null,
      newPriorityTxMaxGasLimit: null
    ): EventFilter;
  };

  estimateGas: {
    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    addL2Logs(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addL2Logs(uint256,bytes32)"(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectOperationsFromPriorityQueue(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectOperationsFromPriorityQueue(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeBlocks(overrides?: Overrides): Promise<BigNumber>;

    "executeBlocks()"(overrides?: Overrides): Promise<BigNumber>;

    finalizeEthWithdrawal(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllowList(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllowList()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityQueueSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityQueueSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalBlocksExecuted()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityTxs(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPriorityTxs()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,address,address,address,uint256)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256)"(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityQueueFrontOperation(overrides?: CallOverrides): Promise<BigNumber>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    requestL2TransactionProof(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestL2TransactionProof((address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAllowList(
      _newAllowList: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowList(address)"(
      _newAllowList: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProofChainContract(
      _proofChainContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProofChainContract(address)"(
      _proofChainContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    addL2Logs(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addL2Logs(uint256,bytes32)"(
      _index: BigNumberish,
      _l2LogsRootHashes: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectOperationsFromPriorityQueue(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectOperationsFromPriorityQueue(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeBlocks(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeBlocks()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    finalizeEthWithdrawal(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllowList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFirstUnprocessedPriorityTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFirstUnprocessedPriorityTx()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingGovernor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityQueueSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityQueueSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityTxMaxGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalBlocksExecuted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityTxs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPriorityTxs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,address,address,uint256)"(
      _chainId: BigNumberish,
      _proofSystem: string,
      _governor: string,
      _allowList: string,
      _priorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isEthWithdrawalFinalized(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEthWithdrawalFinalized(uint256,uint256)"(
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2LogsRootHash(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2LogsRootHash(uint256)"(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TransactionBaseCost(uint256,uint256,uint256)"(
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityQueueFrontOperation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priorityQueueFrontOperation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL1ToL2TransactionStatus(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBlock: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"(
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBlock: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    requestL2TransactionProof(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestL2TransactionProof((address,uint256,uint256,address,uint64,uint256,uint256,uint256,uint256,address),bytes,bytes[],bool)"(
      _params: {
        sender: string;
        txId: BigNumberish;
        l2Value: BigNumberish;
        contractAddressL2: string;
        expirationTimestamp: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPrice: BigNumberish;
        l2GasPricePerPubdata: BigNumberish;
        valueToMint: BigNumberish;
        refundRecipient: string;
      },
      _calldata: BytesLike,
      _factoryDeps: BytesLike[],
      _isFree: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAllowList(
      _newAllowList: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowList(address)"(
      _newAllowList: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriorityTxMaxGasLimit(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriorityTxMaxGasLimit(uint256)"(
      _newPriorityTxMaxGasLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProofChainContract(
      _proofChainContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProofChainContract(address)"(
      _proofChainContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
